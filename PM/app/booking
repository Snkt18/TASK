 @PostMapping("/flight/post")
    public Flight postFlight(@RequestBody Flight flight) {
        
        LocalDateTime dt1 = LocalDateTime.of(flight.getDepartureDate(), flight.getDepartureTime()); 
        LocalDateTime dt2 = LocalDateTime.of(flight.getArrivalDate(), flight.getArrivalTime()); 
        Duration d = Duration.between(dt1, dt2);
        
        flight.setHours(d.toHours());
        flight.setMins(d.toMinutes()%60);
        
        return flightRepository.save(flight);
        }
    
    @DeleteMapping("/flight/delete/{fid}")
    public void deleteFlight(@PathVariable("fid") Long fid) {
        flightRepository.deleteById(fid);
    }
    
    @GetMapping("/flight/all")
    public List<Flight> getAllFlights(){
        
        return flightRepository.findAll();
    }

    @GetMapping("/flight/{id}")
    public Flight getFlightById(@PathVariable("id")Long id) {
        Optional<Flight> optional= flightRepository.findById(id);
        
        if(!optional.isPresent())
            throw new RuntimeException("Invalid Id");
        
        return optional.get();
    }
    
    @GetMapping("/flight/details")
    public List<Flight> getFlightsByDetails(@RequestParam("source") String source,@RequestParam("destination") String destination,@RequestParam("date") String date){
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
        
        LocalDate temp = LocalDate.parse(date, formatter);
        
        return flightRepository.findByDetails(source, destination, temp);
    }
